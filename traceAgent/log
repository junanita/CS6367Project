CLASS: spark.Session
    METHOD: maxInactiveInterval
        Constant Value: interval = 200
        Small Value Set: interval ∈ {}
        Non-zero: interval != 0
        Range: interval ∈ [200, 200]
CLASS: spark.embeddedserver.EmbeddedServer$$EnhancerByMockitoWithCGLIB$$b4504f4a
    METHOD: getCallback
        Constant Value: varName = 0
        Small Value Set: varName ∈ {}
        Range: varName ∈ [0, 0]
CLASS: spark.embeddedserver.jetty.websocket.WebSocketTestClient
    METHOD: awaitClose
        Constant Value: duration = 30
        Small Value Set: duration ∈ {}
        Non-zero: duration != 0
        Range: duration ∈ [30, 30]
    METHOD: onClose
        Constant Value: statusCode = 1006
        Small Value Set: statusCode ∈ {}
        Non-zero: statusCode != 0
        Range: statusCode ∈ [1006, 1006]
CLASS: spark.embeddedserver.jetty.JettyServerFactory$$EnhancerByMockitoWithCGLIB$$ae97c162
    METHOD: create
        Small Value Set: varName ∈ {}
        Non-zero: varName != 0
        Range: varName ∈ [10, 10000]
    METHOD: getCallback
        Constant Value: varName = 0
        Small Value Set: varName ∈ {}
        Range: varName ∈ [0, 0]
CLASS: spark.embeddedserver.EmbeddedServers
    METHOD: create
        Small Value Set: multipleHandlers ∈ {}
CLASS: spark.utils.urldecoding.UrlDecode
    METHOD: path
        Constant Value: offset = 0
        Small Value Set: offset ∈ {}
        Range: offset ∈ [0, 0]
        Small Value Set: length ∈ {}
        Non-zero: length != 0
        Range: length ∈ [3, 55]
CLASS: spark.utils.urldecoding.Utf8StringBuilder
    METHOD: <init>
        Small Value Set: capacity ∈ {}
        Non-zero: capacity != 0
        Range: capacity ∈ [7, 33]
CLASS: spark.embeddedserver.jetty.EmbeddedJettyServer
    METHOD: ignite
        Small Value Set: port ∈ {}
        Range: port ∈ [0, 2147483647]
        Small Value Set: maxThreads ∈ {}
        Range: maxThreads ∈ [-1, 100]
        Small Value Set: minThreads ∈ {}
        Range: minThreads ∈ [-1, 10]
        Small Value Set: threadIdleTimeoutMillis ∈ {}
        Range: threadIdleTimeoutMillis ∈ [-1, 10000]
    METHOD: field
        Constant Value: SPARK_DEFAULT_PORT = 4567
        Small Value Set: SPARK_DEFAULT_PORT ∈ {}
        Non-zero: SPARK_DEFAULT_PORT != 0
        Range: SPARK_DEFAULT_PORT ∈ [4567, 4567]
CLASS: spark.Service$StaticFiles
    METHOD: expireTime
        Constant Value: seconds = 600
        Small Value Set: seconds ∈ {}
        Non-zero: seconds != 0
        Range: seconds ∈ [600, 600]
CLASS: spark.BooksIntegrationTest$UrlResponse
    METHOD: access$102
        Small Value Set: x1 ∈ {}
        Non-zero: x1 != 0
        Range: x1 ∈ [200, 201]
CLASS: spark.HaltException
    METHOD: field
        Constant Value: serialVersionUID = 1
        Small Value Set: serialVersionUID ∈ {}
        Non-zero: serialVersionUID != 0
        Range: serialVersionUID ∈ [1, 1]
        Constant Value: statusCode = 401
        Small Value Set: statusCode ∈ {}
        Non-zero: statusCode != 0
        Range: statusCode ∈ [401, 401]
    METHOD: <init>
        Small Value Set: statusCode ∈ {}
        Non-zero: statusCode != 0
        Range: statusCode ∈ [401, 404]
CLASS: spark.ResponseTest
    METHOD: validateCookieContent
        Small Value Set: maxAge ∈ {}
        Non-zero: maxAge != 0
        Range: maxAge ∈ [-1, 86400]
        Small Value Set: secured ∈ {}
        Small Value Set: httpOnly ∈ {}
CLASS: spark.examples.exception.JWGmeligMeylingException
    METHOD: field
        Constant Value: serialVersionUID = 1
        Small Value Set: serialVersionUID ∈ {}
        Non-zero: serialVersionUID != 0
        Range: serialVersionUID ∈ [1, 1]
CLASS: spark.embeddedserver.jetty.HttpRequestWrapper
    METHOD: field
        Small Value Set: notConsumed ∈ {}
    METHOD: notConsumed
        Constant Value: notConsumed = true
        Small Value Set: notConsumed ∈ {}
CLASS: spark.embeddedserver.jetty.SocketConnectorFactory
    METHOD: initializeConnector
        Small Value Set: port ∈ {}
        Non-zero: port != 0
        Range: port ∈ [1234, 2147483647]
    METHOD: createSocketConnector
        Small Value Set: port ∈ {}
        Non-zero: port != 0
        Range: port ∈ [80, 2147483647]
    METHOD: createSecureSocketConnector
        Small Value Set: port ∈ {}
        Non-zero: port != 0
        Range: port ∈ [80, 8888]
CLASS: spark.embeddedserver.jetty.EmbeddedJettyFactory
    METHOD: field
        Small Value Set: httpOnly ∈ {}
    METHOD: create
        Small Value Set: hasMultipleHandler ∈ {}
    METHOD: withHttpOnly
        Constant Value: httpOnly = false
        Small Value Set: httpOnly ∈ {}
CLASS: spark.embeddedserver.jetty.websocket.WebSocketTestHandler
    METHOD: closed
        Constant Value: statusCode = 1000
        Small Value Set: statusCode ∈ {}
        Non-zero: statusCode != 0
        Range: statusCode ∈ [1000, 1000]
CLASS: spark.ssl.SslStores
    METHOD: field
        Constant Value: needsClientCert = false
        Small Value Set: needsClientCert ∈ {}
    METHOD: create
        Constant Value: needsClientCert = false
        Small Value Set: needsClientCert ∈ {}
    METHOD: <init>
        Constant Value: needsClientCert = false
        Small Value Set: needsClientCert ∈ {}
CLASS: spark.CustomErrorPages
    METHOD: getDefaultFor
        Small Value Set: status ∈ {}
        Non-zero: status != 0
        Range: status ∈ [404, 500]
    METHOD: add
        Small Value Set: status ∈ {}
        Non-zero: status != 0
        Range: status ∈ [404, 500]
    METHOD: existsFor
        Small Value Set: status ∈ {}
        Non-zero: status != 0
        Range: status ∈ [404, 500]
    METHOD: getFor
        Small Value Set: status ∈ {}
        Non-zero: status != 0
        Range: status ∈ [404, 500]
CLASS: spark.BooksIntegrationTest
    METHOD: field
        Constant Value: PORT = 4567
        Small Value Set: PORT ∈ {}
        Non-zero: PORT != 0
        Range: PORT ∈ [4567, 4567]
CLASS: spark.ServiceTest
    METHOD: field
        Constant Value: NOT_FOUND_STATUS_CODE = 404
        Small Value Set: NOT_FOUND_STATUS_CODE ∈ {}
        Non-zero: NOT_FOUND_STATUS_CODE != 0
        Range: NOT_FOUND_STATUS_CODE ∈ [404, 404]
CLASS: spark.InitExceptionHandlerTest
    METHOD: field
        Constant Value: NON_VALID_PORT = 2147483647
        Small Value Set: NON_VALID_PORT ∈ {}
        Non-zero: NON_VALID_PORT != 0
        Range: NON_VALID_PORT ∈ [2147483647, 2147483647]
CLASS: spark.utils.GzipUtils
    METHOD: addContentEncodingHeaderIfMissing
        Small Value Set: wantsGzip ∈ {}
    METHOD: checkAndWrap
        Small Value Set: requireWantsHeader ∈ {}
CLASS: spark.embeddedserver.jetty.JettyServerFactory$$EnhancerByMockitoWithCGLIB$$594cfe7b
    METHOD: create
        Constant Value: varName = 0
        Small Value Set: varName ∈ {}
        Range: varName ∈ [0, 0]
    METHOD: getCallback
        Constant Value: varName = 0
        Small Value Set: varName ∈ {}
        Range: varName ∈ [0, 0]
CLASS: spark.http.matching.MatcherFilter
    METHOD: field
        Small Value Set: externalContainer ∈ {}
        Small Value Set: hasOtherHandlers ∈ {}
    METHOD: <init>
        Small Value Set: externalContainer ∈ {}
        Small Value Set: hasOtherHandlers ∈ {}
CLASS: spark.servlet.ServletTest
    METHOD: field
        Constant Value: PORT = 9393
        Small Value Set: PORT ∈ {}
        Non-zero: PORT != 0
        Range: PORT ∈ [9393, 9393]
